{"version":3,"file":"static/js/894.030a516c.chunk.js","mappings":"uKAGMA,EAAa,SAAAC,IAAAC,EAAAA,EAAAA,GAAAF,EAAAC,GAAA,IAAAE,GAAAC,EAAAA,EAAAA,GAAAJ,GAAA,SAAAA,IAAA,IAAAK,GAAAC,EAAAA,EAAAA,GAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAGd,OAHcP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KACfM,MAAQ,CACJC,OAAO,GACVZ,CAAA,CAeA,OAfAa,EAAAA,EAAAA,GAAAlB,EAAA,EAAAmB,IAAA,oBAAAC,MAED,SAAkBH,EAAOI,GACrBC,QAAQC,IAAIN,EAAOI,GACnBG,KAAKC,SAAS,CACVR,OAAO,GAEf,GAAC,CAAAE,IAAA,SAAAC,MAED,WACI,OAAII,KAAKR,MAAMC,OACJS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAGjBH,KAAKI,MAAMC,QACtB,KAAC7B,CAAA,CAlBc,CAAS8B,EAAAA,WAqB5B,K,mLCiCMC,EAAO,SAAHC,GAAgB,IAAXC,EAAID,EAAJC,KACJC,EAAgDD,EAAhDC,KAAMC,EAA0CF,EAA1CE,YAAaC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,SAAUC,EAAQL,EAARK,KAG/C,OACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBX,SAAA,EAC9BH,EAAAA,EAAAA,KAAA,OAAKe,IAAKL,EAAWM,IAAI,mBAAmBF,UAAU,qBACtDD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBX,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,KAAGc,UAAU,mBAAkBX,SAAEK,KACjCR,EAAAA,EAAAA,KAAA,KAAGc,UAAU,oBAAmBX,SAC3BM,KAELI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBX,SAAA,EAC7BH,EAAAA,EAAAA,KAAA,KAAGiB,KAAMN,EAAUG,UAAU,sBAAqBX,UAC9CH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOX,SAAC,gBAE3BH,EAAAA,EAAAA,KAAA,KAAGiB,KAAML,EAAME,UAAU,2BAA0BX,UAC/CH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOX,SAAC,mBAM/C,EAEA,EA1EmB,WAEf,IAAAe,GAAwBC,EAAAA,EAAAA,UAAS,CAAC,GAAEC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7BX,EAAIa,EAAA,GAAEE,EAAOF,EAAA,GACpBG,GAAmDC,EAAAA,EAAAA,KAA5CC,EAAOF,EAAPE,QAASlC,EAAKgC,EAALhC,MAAOmC,EAAYH,EAAZG,aAAcC,EAAUJ,EAAVI,YAErCC,EAAAA,EAAAA,YAAU,WACNC,GAEJ,GAAG,IAEH,IAKMA,EAAa,SAAbA,IACFF,IACA,IAAMG,EAAKC,KAAKC,MAAmB,IAAbD,KAAKE,SAAiC,QAC5DP,EAAaI,GACRI,MAAK,SAAAC,GAAI,MAAuB,wEAAnBA,EAAKzB,UAAsFmB,IAT5F,SAACtB,GAClBe,EAAQf,EACZ,CAOgI6B,CAAaD,EAAK,GAClJ,EAEUE,EAAe9C,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzCqC,EAAUb,GAAUzB,EAAAA,EAAAA,KAACuC,EAAAA,EAAO,IAAK,KACjCC,EAAYf,GAAWlC,EAA+B,MAAtBS,EAAAA,EAAAA,KAACK,EAAI,CAACE,KAAMA,IAElD,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYX,SAAA,CACtBkC,EACAC,EACAE,GACD3B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBX,SAAA,EAC/BU,EAAAA,EAAAA,MAAA,KAAGC,UAAU,oBAAmBX,SAAA,CAAC,+BACFH,EAAAA,EAAAA,KAAA,SAAK,6CAGpCA,EAAAA,EAAAA,KAAA,KAAGc,UAAU,oBAAmBX,SAAC,2BAGjCH,EAAAA,EAAAA,KAAA,UAAQyC,QAASZ,EAAYf,UAAU,sBAAqBX,UACxDH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOX,SAAC,cAE3BH,EAAAA,EAAAA,KAAA,OAAKe,IAAK2B,EAAS1B,IAAI,UAAUF,UAAU,gCAI/D,E,SCwDA,EAtGiB,SAACZ,GAEd,IAAAgB,GAAgCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCyB,EAAQvB,EAAA,GAAEwB,EAAWxB,EAAA,GAC5ByB,GAA4C1B,EAAAA,EAAAA,WAAS,GAAM2B,GAAAzB,EAAAA,EAAAA,GAAAwB,EAAA,GAApDE,EAAcD,EAAA,GAAEE,EAAiBF,EAAA,GACxCG,GAA4B9B,EAAAA,EAAAA,UAAS,KAAI+B,GAAA7B,EAAAA,EAAAA,GAAA4B,EAAA,GAAlCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAkClC,EAAAA,EAAAA,WAAS,GAAMmC,GAAAjC,EAAAA,EAAAA,GAAAgC,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAC9BG,GAAwCtC,EAAAA,EAAAA,WAAS,GAAKuC,GAAArC,EAAAA,EAAAA,GAAAoC,EAAA,GAA/CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GACpCnC,GAA2CC,EAAAA,EAAAA,KAApCC,EAAOF,EAAPE,QAASlC,EAAKgC,EAALhC,MAAOsE,EAAgBtC,EAAhBsC,kBAEvBjC,EAAAA,EAAAA,YAAU,kBAAMkC,EAAUX,GAAQ,EAAK,GAAE,IAEzC,IAAMW,EAAY,SAACX,EAAQY,GACbH,GAAVG,GACAF,EAAiBV,GACZjB,KAAK8B,EACd,EAMMA,EAAmB,SAACC,GACtB,IAAIC,EAASD,EAAYlF,OAAS,EAElC6D,GAAY,SAAAD,GAAQ,SAAAtD,QAAA8E,EAAAA,EAAAA,GAAQxB,IAAQwB,EAAAA,EAAAA,GAAKF,GAAW,IACpDjB,GAAkB,GAClBI,GAAU,SAAAD,GAAM,OAAIA,EAAS,CAAC,IAC9BK,EAAcU,EAClB,EAEME,GAAWC,EAAAA,EAAAA,QAAO,IAElBC,EAAc,SAACxC,GACjBsC,EAASG,QAAQC,SAAQ,SAAAC,GAAI,OAAIA,EAAKC,UAAUC,OAAO,sBAAsB,IAC7EP,EAASG,QAAQzC,GAAI4C,UAAUE,IAAI,uBACnCR,EAASG,QAAQzC,GAAI+C,OACzB,EAmCA,IAAMC,EAhCN,SAAqBC,GACjB,IAAMD,EAASC,EAAIC,KAAI,SAACP,EAAMQ,GAC1B,IAAOC,EAA+B,wEAAnBT,EAAK/D,UAAuF,CAAC,UAAc,SAAW,CAAC,UAAc,SAExJ,OACIG,EAAAA,EAAAA,MAAA,MACIC,UAAU,aACVqE,SAAU,EACVC,IAAK,SAAAC,GAAE,OAAIjB,EAASG,QAAQU,GAAKI,CAAE,EAEnC5C,QAAS,WACLvC,EAAMoF,eAAeb,EAAK3C,IAC1BwC,EAAYW,EAChB,EACAM,WAAY,SAACC,GACK,MAAVA,EAAE/F,KAAyB,UAAV+F,EAAE/F,MACnBS,EAAMoF,eAAeb,EAAK3C,IAC1BwC,EAAYW,GAEpB,EAAE9E,SAAA,EACEH,EAAAA,EAAAA,KAAA,OAAKe,IAAK0D,EAAK/D,UAAWM,IAAKyD,EAAKjE,KAAMiF,MAAOP,KACjDlF,EAAAA,EAAAA,KAAA,OAAKc,UAAU,aAAYX,SAAEsE,EAAKjE,SAZjCiE,EAAK3C,GAetB,IACA,OACI9B,EAAAA,EAAAA,KAAA,MAAIc,UAAU,aAAYX,SACrB2E,GAGb,CAEcY,CAAY/C,GAEpBN,EAAe9C,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzCqC,EAAWb,IAAYkC,GAAgB3D,EAAAA,EAAAA,KAACuC,EAAAA,EAAO,IAAK,KACnDoD,EACa5C,GACI/C,EAAAA,EAAAA,KAACuC,EAAAA,EAAO,KACJvC,EAAAA,EAAAA,KAAA,UAAQc,UAAU,mCACV8E,SAAU7C,EACV0C,MAAO,CAAC,QAAWlC,EAAY,OAAS,SACxCd,QAAS,WA/DzCO,GAAkB,GAiE0Bc,EAAUX,EACV,EACHhD,UACbH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOX,SAAC,gBAEvD,OACIU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYX,SAAA,CACtBkC,EACAC,EACAwC,EACAa,IAGb,ECrFA,EAjBiB,WACb,OACI9E,EAAAA,EAAAA,MAAAgF,EAAAA,SAAA,CAAA1F,SAAA,EACIH,EAAAA,EAAAA,KAAA,KAAGc,UAAU,eAAcX,SAAC,kDAC5BU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUX,SAAA,EACrBU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,yBAAwBX,SAAA,EACnCH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,4BACfd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,6BAEnBd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,2BACfd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,2BACfd,EAAAA,EAAAA,KAAA,OAAKc,UAAU,+BAI/B,ECkCMT,EAAO,SAAHC,GAAgB,IAAXC,EAAID,EAAJC,KACJC,EAAwDD,EAAxDC,KAAMC,EAAkDF,EAAlDE,YAAaC,EAAqCH,EAArCG,UAAWC,EAA0BJ,EAA1BI,SAAUC,EAAgBL,EAAhBK,KAAMkF,EAAUvF,EAAVuF,OAC/CZ,EAA0B,wEAAdxE,EAAsF,CAAC,UAAc,SAAW,CAAC,UAAc,SAEjJ,OACIG,EAAAA,EAAAA,MAAAgF,EAAAA,SAAA,CAAA1F,SAAA,EACIU,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcX,SAAA,EACzBH,EAAAA,EAAAA,KAAA,OAAKe,IAAKL,EAAWM,IAAKR,EAAMiF,MAAOP,KACvCrE,EAAAA,EAAAA,MAAA,OAAAV,SAAA,EACIH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,kBAAiBX,SAAEK,KAClCK,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYX,SAAA,EACvBH,EAAAA,EAAAA,KAAA,KAAGiB,KAAMN,EAAUG,UAAU,sBAAqBX,UAC9CH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOX,SAAC,gBAE3BH,EAAAA,EAAAA,KAAA,KAAGiB,KAAML,EAAME,UAAU,2BAA0BX,UAC/CH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,QAAOX,SAAC,qBAKvCH,EAAAA,EAAAA,KAAA,OAAKc,UAAU,cAAaX,SACvBM,KAELT,EAAAA,EAAAA,KAAA,OAAKc,UAAU,eAAcX,SAAC,aAC9BU,EAAAA,EAAAA,MAAA,MAAIC,UAAU,oBAAmBX,SAAA,CAC5B2F,EAAO/G,OAAS,EAAI,KAAO,yCAExB+G,EAAOd,KAAI,SAACP,EAAMQ,GACd,OACIjF,EAAAA,EAAAA,KAAA,MAAYc,UAAU,oBAAmBX,SACpCsE,EAAKjE,MADDyE,EAIjB,SAKpB,EAEA,EAlFkB,SAAC/E,GACf,IAAAgB,GAAyBC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhCX,EAAIa,EAAA,GAAEE,EAAOF,EAAA,GAEpBG,GAAmDC,EAAAA,EAAAA,KAA5CC,EAAOF,EAAPE,QAASlC,EAAKgC,EAALhC,MAAOmC,EAAYH,EAAZG,aAAcC,EAAUJ,EAAVI,YAErCC,EAAAA,EAAAA,YAAU,WACLC,GACL,GAAE,CAAC3B,EAAM6F,SAGT,IAAMlE,EAAa,WACfF,IACA,IAAOoE,EAAU7F,EAAV6F,OACFA,GAILrE,EAAaqE,GACR7D,KAAKE,EACd,EAEMA,EAAe,SAAC7B,GAClBe,EAAQf,EACZ,EAGUyF,EAAWzF,GAAQkB,GAAWlC,EAAQ,MAAOS,EAAAA,EAAAA,KAACiG,EAAQ,IACtD5D,EAAe9C,GAAQS,EAAAA,EAAAA,KAACC,EAAAA,EAAY,IAAK,KACzCqC,EAAUb,GAAUzB,EAAAA,EAAAA,KAACuC,EAAAA,EAAO,IAAK,KACjCC,EAAYf,GAAWlC,IAAUgB,EAA8B,MAAtBP,EAAAA,EAAAA,KAACK,EAAI,CAACE,KAAMA,IAE3D,OACIM,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYX,SAAA,CACtB6F,EACA3D,EACAC,EACAE,IAIjB,E,8DChBI,EAzBmB,WACf,IAAAtB,GAAgCC,EAAAA,EAAAA,UAAS,MAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCgF,EAAY9E,EAAA,GAAEE,EAAOF,EAAA,GAM5B,OACQP,EAAAA,EAAAA,MAAAgF,EAAAA,SAAA,CAAA1F,SAAA,EACIH,EAAAA,EAAAA,KAAC1B,EAAAA,EAAa,CAAA6B,UACVH,EAAAA,EAAAA,KAACmG,EAAU,OAEftF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeX,SAAA,EAC1BH,EAAAA,EAAAA,KAAC1B,EAAAA,EAAa,CAAA6B,UACVH,EAAAA,EAAAA,KAACoG,EAAQ,CAACd,eAXP,SAACxD,GACpBR,EAAQQ,EACZ,OAWgB9B,EAAAA,EAAAA,KAAC1B,EAAAA,EAAa,CAAA6B,UACVH,EAAAA,EAAAA,KAACqG,EAAQ,CAACN,OAAQG,UAG1BlG,EAAAA,EAAAA,KAAA,OAAKc,UAAU,gBAAgBC,IAAKuF,EAAYtF,IAAI,aAGpE,C","sources":["components/errorBoundary/ErrorBoundary.jsx","components/randomChar/RandomChar.jsx","components/charList/CharList.jsx","components/skeleton/Skeleton.jsx","components/charInfo/CharInfo.jsx","components/pages/HeroesPage.jsx"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    \n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(data =>(data.thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\")? updateChar() : onCharLoaded(data))\n    }\n\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another one\n                    </p>\n                    <button onClick={updateChar} className=\"button button__main\">\n                        <div className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n        )\n}\n\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    // const imgStyle = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg')? {'objectFit' : 'contain'} : {'objectFit' : 'cover'};\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" /*style={imgStyle}*/ />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(109);\n    const [charEnded, setCharEnded] = useState(false);\n    const [firstLoading, setFirstLoading] = useState(true);\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => onRequest(offset, true), [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setFirstLoading(false) : setFirstLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n \n    const onCharListLoading = () => {\n        setNewItemLoading(true);\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = (newCharList.length < 9)? true : false\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded( ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n  \n    function renderItems(arr) {\n        const items =  arr.map((item, i) => {\n            const  imgStyle = (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') ? {'objectFit' : 'unset'} : {'objectFit' : 'cover'}\n            \n            return (\n                <li \n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = (loading && !firstLoading) ? <Spinner/> : null;\n    const  buttonSpinner = \n                        newItemLoading ? \n                            <Spinner/> : \n                                <button className=\"button button__main button__long\"\n                                        disabled={newItemLoading}\n                                        style={{\"display\": charEnded ? \"none\" : \"block\"}}\n                                        onClick={() =>{\n                                                    onCharListLoading()\n                                                    onRequest(offset)\n                                                    }\n                                                }>\n                                    <div className=\"inner\">load more</div>\n                                </button>\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            {buttonSpinner}        \n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst  CharInfo = (props) => {\n    const [char, setChar ] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() =>{\n         updateChar()\n    },[props.charId])\n\n\n    const updateChar = () => {\n        clearError();\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n  \n        const skeleton = char || loading || error ? null : <Skeleton/>;\n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = loading ? <Spinner/> : null;\n        const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n        return (\n            <div className=\"char__info\">\n                {skeleton}\n                {errorMessage}\n                {spinner}\n                {content}\n            </div>\n        )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n    const imgStyle = (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg')? {'objectFit' : 'unset'} : {'objectFit' : 'cover'}\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }                \n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","    import { useState } from \"react\";\r\n    import RandomChar from \"../randomChar/RandomChar\";\r\n    import CharList from \"../charList/CharList\";\r\n    import CharInfo from \"../charInfo/CharInfo\";\r\n    import ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\n    import decoration from \"../../resources/img/vision.png\";\r\n\r\n    const HeroesPage = () => {\r\n        const [selectedChar, setChar] = useState(null);\r\n\r\n        const onCharSelected = (id) => {\r\n            setChar(id);\r\n        };\r\n\r\n        return (\r\n                <>\r\n                    <ErrorBoundary>\r\n                        <RandomChar />\r\n                    </ErrorBoundary>\r\n                    <div className=\"char__content\">\r\n                        <ErrorBoundary>\r\n                            <CharList onCharSelected={onCharSelected} />\r\n                        </ErrorBoundary>\r\n                        <ErrorBoundary>\r\n                            <CharInfo charId={selectedChar} />\r\n                        </ErrorBoundary>\r\n                    </div>\r\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n                </>\r\n        );\r\n    };\r\n\r\n    export default HeroesPage;\r\n"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","View","_ref","char","name","description","thumbnail","homepage","wiki","_jsxs","className","src","alt","href","_useState","useState","_useState2","_slicedToArray","setChar","_useMarvelService","useMarvelService","loading","getCharacter","clearError","useEffect","updateChar","id","Math","floor","random","then","data","onCharLoaded","errorMessage","spinner","Spinner","content","onClick","mjolnir","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","_useState9","_useState10","firstLoading","setFirstLoading","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","tabIndex","ref","el","onCharSelected","onKeyPress","e","style","renderItems","buttonSpinner","disabled","_Fragment","comics","charId","skeleton","Skeleton","selectedChar","RandomChar","CharList","CharInfo","decoration"],"sourceRoot":""}