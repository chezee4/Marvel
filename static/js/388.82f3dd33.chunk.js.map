{"version":3,"file":"static/js/388.82f3dd33.chunk.js","mappings":"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","sources":["components/errorBoundary/ErrorBoundary.jsx","components/comicsList/ComicsList.jsx","components/pages/ComicsPage.jsx"],"sourcesContent":["import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport { Link } from 'react-router-dom';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Spinner from '../spinner/Spinner';\n\nimport './comicsList.scss';\n\n\n\n    const ComicsList = () => {\n\n        const [comicsList, setComicsList] = useState([]);\n        const [newItemLoading, setNewItemLoading] = useState(false);\n        const [offset, setOffset] = useState(60);\n        const [firstLoading, setFirstLoading] = useState(true);\n        const [endComics, setEndComics] = useState(false);\n\n        const {getAllComics, error, loading} = useMarvelService();\n\n        useEffect(() => onRequest(offset, true), []);\n\n        const onRequest = (offset, initial) => {\n            initial ? setFirstLoading(false) : setFirstLoading(true);\n            getAllComics(offset)\n            .then(onComicsListLoaded)\n        };\n        const onComicsListLoading = () => {\n            setNewItemLoading(true);\n        }\n        const onComicsListLoaded = (newComicsList) => {\n            let ended = (newComicsList.length < 8) ? true : false;\n            setComicsList(comicsList => [...comicsList, ...newComicsList]);\n            setNewItemLoading(false);\n            setOffset(offset => offset + 8);\n            setEndComics(ended);\n        };\n\n        const renderItems = arr => {\n            const items = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <Link to={`/comics/${item.id}`}>\n                        <img src={item.thumbnail} alt=\"ultimate war\" className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </Link>\n                </li>\n            )\n            });\n\n            return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n            )\n        }\n        const items = renderItems(comicsList);\n\n        \n        const errorMessage = error ? <ErrorMessage/> : null;\n        const spinner = (loading && !firstLoading) ? <Spinner/> : null;\n        const  buttonSpinner = \n                        newItemLoading ? \n                            <Spinner/> : \n                                <button className=\"button button__main button__long\"\n                                        disabled={newItemLoading}\n                                        style={{\"display\": endComics ? \"none\" : \"block\"}}\n                                        onClick={() =>{\n                                                    onComicsListLoading()\n                                                    onRequest(offset)\n                                                    }\n                                                }>\n                                    <div className=\"inner\">load more</div>\n                                </button>\n                            \n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            {buttonSpinner}\n        </div>\n    )\n\n}\n\nexport default ComicsList;","import ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport AppBanner  from \"../appBanner/AppBanner\";\r\nimport ComicsList  from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n\r\n    return (\r\n            <>\r\n               <ErrorBoundary>\r\n                  <AppBanner/>\r\n               </ErrorBoundary>\r\n\r\n               <ErrorBoundary>\r\n                  <ComicsList/>\r\n               </ErrorBoundary>\r\n            </>\r\n    );\r\n};\r\n\r\nexport default ComicsPage;\r\n"],"names":["ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","console","log","this","setState","_jsx","ErrorMessage","props","children","Component","_useState","useState","_useState2","_slicedToArray","comicsList","setComicsList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","firstLoading","setFirstLoading","_useState9","_useState10","endComics","setEndComics","_useMarvelService","useMarvelService","getAllComics","loading","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","_toConsumableArray","items","arr","map","item","i","className","_jsxs","Link","to","id","src","thumbnail","alt","title","price","renderItems","errorMessage","spinner","Spinner","buttonSpinner","disabled","style","onClick","_Fragment","AppBanner","ComicsList"],"sourceRoot":""}